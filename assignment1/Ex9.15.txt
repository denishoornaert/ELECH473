// Objective: reg1 * reg2 = reg4(MSB) reg3(LSB)

// Memory INFO:
//  1. operand 1
//  2. operand 2
//  3. result LSB
//  4. result MSB
//  5. counter
//  6. MSB operand 1 (used for sum)
// 7 -> 16: masks used for computation (x)
// 17 -> ...


            // Init entries
            movi 1, 0x0007                                      // operand 1 LSB (add on every loop)
            movi 2, 0x0009                                      // operand 2 LSB (use for comparison with counter)
            // nop
            // nop
            // nop
            // nop

            // Test if operand 1 == 0 ?
            movi 7, 0x0000
            beq 1, 7, zerodetected
            beq 2, 7, zerodetected

            movi 3, <? endcond ?>                               // else : resume
            jalr 3, 3

zerodetected: movi 3, 0x0000                                    // result LSB
            movi 4, 0x0000                                      // result MSB
            halt                                                // if : halt

            // Init
endcond:    movi 5, 0x0011                                      // Upper memory

            // Calculate masque
            movi 4, 0xfffe                                      // Init masque
comp_loop:  addi 5, 5, -1                                       // Calculate memory

            sw 4, 5, 0x0000                                     // Save masque in memory

            nand 7, 4, 4                                        // Not 4
            add 6, 7, 7                                         // Shift
            // Op1 = 7 = nand(4) -> nand(7) = nand(nand(4)) = 4
            nand 6, 6, 6 // Op 2
            nand 6, 6, 4
            nand 4, 6, 6

            movi 6, 0x0007

            beq 6, 5, comp_end
            movi 6, <? comp_loop ?>
            jalr 6, 6
            
comp_end:   movi 3, 0x0000                                      // Memory start
            movi 7, 0x0000
            movi 5, 0x0000                                      // result LSB
            movi 6, 0x0000                                      // result MSB
            add 7, 7, 2                                         // counter

            // Save context                                     // Memory
            sw 1, 3, 0x0001                                     // 1.  operand 1 (add on every loop)

            // addi 2, 2, -1                                       // Remove 1 to operator 2
            sw 2, 3, 0x0002                                     // 2.  operand 2 (use to check if we could save x2)

            sw 5, 3, 0x0003                                     // 3.  result LSB
            sw 6, 3, 0x0004                                     // 4.  result MSB

            // Prepare input for ex8
            movi 4, 0x0000
            add 3, 3, 1

            movi 1, 0x0000
            movi 2, <? loop ?>
            jalr 2, 2

preloop:    addi 7, 7, -1                                       // Decrement counter
      
            // Here we have:
            // 1: memory start address
            // 2: masque 
            // 3: op1
            // 4: (masque and after:) op1 (MSB)
            // 5: use for comparison
            // 6: use for comparison
            // 7: counter

            // Test for "x2" or "x4" or "x8" or "x16" or "x32"
            movi 1, 0x0006                                       // Memory start

leqx:       movi 2, 0x0011                                       // Memory end
            addi 1, 1, 0x0001                                    // Increment memory
            beq 1, 2, endleqx                                    // Have read all address
            lw 2, 1, 0x0000                                      // Load masque for x
            nand 2, 7, 2                                         // Apply masque
            movi 4, 0xffff
            beq 2, 4, leqx

            // Bigger than x (reg 4)
            lw 3, 1, 0x000a
            lw 4, 1, 0x0014

            // Test if R3 or R4 == 0
            nand 5, 3, 3
            nand 6, 4, 4
            nand 5, 5, 6
            movi 6, 0x0000
            beq 5, 6, leqx

            // Decrement counter
            // reg2 contain the masque = not(value of x)
            addi 2, 2, 1                                        // Complement of 2
            add 7, 7, 2
            
            movi 2, <? loop ?>
            jalr 2, 2

            // Load operand for ex 8
endleqx:    lw 3, 1, 0x0001                                     // LSB for operand 1 x1
            movi 4, 0x0000                                      // MSB for operand 1 x1


loop:       sw 7, 1, 0x0005                                     // Save increment

            beq 1, 7, end                                       // Check end of loop or not
            movi 7, <? addOp ?>
            jalr 7, 7

end:        lw 3, 1, 0x0003                                     // Load result
            lw 4, 1, 0x0004
            halt                                                // Halt program


// Begining EX8 ----------------------------------------------------------------
            // Input of EX8:
            //     reg4 reg3     + reg6 reg5 = reg4 reg3
            // operand 1 (or x2) +  result   =  result

addOp:      lw 5, 1, 0x0003                                     // Load LSB result in reg 5

            sw 4, 1, 0x0006                                     // Save MSB of operand 1

            // Add first 15 bits
            movi 2, 0x7fff                                      // Mask
            nand 4, 3, 2                                        // Isolate 15 bits
            nand 4, 4, 4                                        // Reverse to and
            nand 6, 5, 2                                        // Isolate 15 bits
            nand 6, 6, 6                                        // Reverse to and

            add 7, 4, 6                                         // add Reg3 and Reg5 in Reg7

            // MSB of Reg3 and Reg5
            movi 2, 0x8000                                      // Mask
            nand 4, 3, 2                                        // Isolate 1 bit
            nand 4, 4, 4                                        // Reverse to and
            nand 6, 5, 2                                        // Isolate 1 bit
            nand 6, 6, 6                                        // Reverse to and

            // MSB of Reg3+Reg4
            nand 7, 7, 2                                        // Get the MSB of A+B
            nand 7, 7, 7                                        // Reverse

            // Now we have :
            //    REG1 : Memory start
            //    REG2 : Mask 0x8000
            //    REG3 : LSB of val1
            //    REG4 : add 15B + 15B
            //    REG5 : LSB of val2
            //    REG6 : MSB bit of REG5
            //    REG7 : MSB of REG3+REG5

            // Condition
test_one:   beq 4, 2, one_rone
            movi 4, 0x0000                                      // Else
            movi 1, <? test_two ?>                              // test_two addr
            jalr 1, 1

one_rone:   movi 4, 0x0001                                      // If

test_two:   beq 6, 2, one_two
            movi 6, 0x0000                                      // Else
            movi 1, <? test_sum ?>                              // test_sum addr
            jalr 1, 1

one_two:    movi 6, 0x0001                                      // If

test_sum:   beq 7, 2, one_sum
            movi 7, 0x0000                                      // Else
            movi 1, <? sec_part ?>                              // sec_part addr
            jalr 1,1

one_sum:    movi 7, 0x0001                                      // If

sec_part:   add 4, 4, 6
            add 4, 4, 7

            movi 2, 0x0002
            nand 4, 4, 2
            movi 2, 0xfffd
            beq 2, 4, carr_inc
            movi 2, 0x0000
            movi 1, <? aft_carr ?>                              // aft_carr addr
            jalr 1, 1

carr_inc:   movi 2, 0x0001

aft_carr:   add 3, 3, 5

            movi 1, 0x0000
            lw 4, 1, 0x0006                                     // Load MSB of operand 1
            lw 5, 1, 0x0004                                     // Load MSB of operand 2
            add 4, 4, 5                                         // Sum of the two MSB
            add 4, 4, 2                                         // Add carry

            // Rappel: reg4 reg3 + reg6 reg5 = reg4 reg3
// Ending   EX8 ----------------------------------------------------------------

            sw 3, 1, 0x0003                                     // Save result (LSB)
            sw 4, 1, 0x0004                                     // Save result (MSB)

            lw 7, 1, 0x0005                                     // Load counter
            lw 6, 1, 0x0002                                     // Load operator 2

            movi 1, 0x0011                                      // addr base+1 (17)
savexloop:  addi 1, 1, -1
            lw 2, 1, 0x0000                                     // Load masque
            addi 2, 2, 1                                        // Complement of 2
            add 2, 6, 2
            beq 2, 7, savex
            movi 5, <? savexloop ?>                             // else
            jalr 5, 5

            // Bigger than X
savex:      sw 3, 1, 0x000a                                     // load the LSB (masks memory zone + 10)
            sw 4, 1, 0x0014                                     // load the MSB (masks memory zone + 20)

afterSave:  movi 6, <? preloop ?>                               // preloop flag addr
            jalr 6, 6

halt                                                            // Normaly neverd used ! see label "end"
