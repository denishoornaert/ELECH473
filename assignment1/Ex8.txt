            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop

            // Memory starting point.
            movi 1, 0x0000

            // Save the MSB of both values in memory.
            sw 4, 1, 0x0001
            sw 6, 1, 0x0002

            // To know if there exist a carry, we isolate the last bit (16).
            // Then we apply the addition on 15 bits.
            movi 2, 0x7fff                                      // Mask
            nand 4, 3, 2                                        // Isolate 15 bits
            nand 4, 4, 4                                        // Reverse to and
            nand 6, 5, 2                                        // Isolate 15 bits
            nand 6, 6, 6                                        // Reverse to and
            add 7, 4, 6                                         // add Reg4 and Reg6 in Reg7

            // We will isolate the last bit which represent the last carry.
            // This bit is saved in register 7.
            movi 2, 0x8000                                      // Mask
            nand 4, 3, 2                                        // Isolate 1 bit
            nand 4, 4, 4                                        // Reverse to and
            nand 6, 5, 2                                        // Isolate 1 bit
            nand 6, 6, 6                                        // Reverse to and
            nand 7, 7, 2                                        // Get the MSB of A+B
            nand 7, 7, 7                                        // Reverse

            // Addition of LSB
            add 3, 3, 5

            // Now we have :
            //    REG1 : Memory start
            //    REG2 : Mask 0x8000
            //    REG3 : LSB of val1 (16)
            //    REG4 : 16th bit of val1 (1)
            //    REG5 : LSB of val2 (16)
            //    REG6 : 16th bit of val2 (1)
            //    REG7 : 16th bit of REG4 + Reg6 (1)

            
            // Conditionnal part for the carry. Get the result of adding 
            // REG4 + REG6 + REG7 on 2 bits. Then isolate the second bit which
            // represent the carry. Add this carry to the MSB part. All those 
            // Computations are made in register 4.
test_one:   beq 4, 2, one_rone
            movi 4, 0x0000
            movi 5, <? test_two ?>
            jalr 5, 5

one_rone:   movi 4, 0x0001

test_two:   beq 6, 2, one_two
            movi 5, <? test_sum ?>
            jalr 5, 5

one_two:    addi 4, 4, 0x0001                                   // Increment

test_sum:   beq 7, 2, one_sum
            movi 5, <? sec_part ?>
            jalr 5, 5

one_sum:    addi 4, 4, 0x0001                                   // Increment

sec_part:   movi 2, 0x0002                                      // Mask to see if the second bit is set to 1
            nand 4, 4, 2                                        // Apply mask
            nand 6, 4, 4                                        // And

            lw 4, 1, 0x0001                                     // Load MSB of operand 1
            lw 5, 1, 0x0002                                     // Load MSB of operand 2
            add 4, 4, 5                                         // Make some

            beq 2, 6, car_addr                                  // If second bit of "carry" sum is set to 1, increment
            movi 5, <? msb_part ?>                              // In other case: jump to the end
            jalr 5, 5

car_addr:   addi 4, 4, 0x0001                                   // Increment the result

msb_part:   halt
