// Objective: reg1 * reg2 = reg4(MSB) reg3(LSB)
// R1 = LSB   # operand 1 
// R2 = LSB   # operand 2
// R3 = LSB   # res LSB
// R4 = MSB   # res MSB
// R5 = CNT   # counter
// R6 = 0x0000
// while(R5 != R2):
//     (R4, R3) = Ex8((R6, R1), (R4, R3))
//     R5++
            
            // Init values
            movi 1, 0x0002                                      // operand 1 LSB
            movi 2, 0x0003                                      // operand 2 LSB
            // nop
            // nop
            // nop
            // nop
            movi 3, 0x0000                                      // result LSB 
            movi 4, 0x0000                                      // result MSB
            movi 5, 0x0000                                      // counter
            movi 6, 0x0000                                      // MSB dummy + Memory start

            // Save context                                     // Memory
            sw 1, 6, 0x0001                                     // 1. operand 1
            sw 2, 6, 0x0002                                     // 2. operand 2 (use for comparison with counter)
            sw 3, 6, 0x0003                                     // 3. result LSB
            sw 4, 6, 0x0004                                     // 4. result MSB
            sw 5, 6, 0x0005                                     // 5. counter % TODO (utile ?)
            // sw 6, 6, 0x0006

            movi 1, <? loop ?>
            jalr 1, 1

preloop:    movi 1, 0x0000                                      // Memory start
            lw 3, 1, 0x0005                                     // Load counter
            lw 2, 1, 0x0001                                     // 1. reg2: operand 1
            
            movi 7, 0xffff
            movi 4, 0xfffe
            nand 4, 2, 4
            beq 4, 7, leq1
            movi 1, 0x000e

            // Bigger than 1
            lw 5, 1, 0x0002                                     // LSB for result x2
            lw 6, 1, 0x0003                                     // MSB for restul x2
            nand 4, 6, 5
            nand 4, 4, 4       
            beq 4, 7, res2computed
            // If not compute -> Load result x1
leq1:       lw 4, 1, 0x0000                                     // MSB for result x1
            lw 6, 1, 0x0001                                     // LSB for result x1
            addi 3, 3, 0x0001                                   // Increment counter
            // Load operand for ex 8
            lw 5, 1, 0x0003                                     // 3. reg5: res LSB
            lw 6, 1, 0x0004                                     // 4. reg6: res MSB

            // Jump to ex8 % TODO
            movi 1, <? loop ?>
            jalr 1, 1


res2computed: addi 3, 3, 0x0002                                 // Increment counter



loop:       movi 1, 0x0000
            sw 3, 1, 0x0005                                     // Save increment
            lw 2, 1, 0x0002                                     // Load operand 2
            
            beq 2, 3, end  // Check loop
            movi 1, <? addOp ?>
            jalr 1, 1

end:        movi 1, <? endloop ?>
            jalr 1, 1


// Begining EX8 ---------------------------------------------------------------- 

addOp:      movi 1, 0x0000                                      // Load memory:
            lw 3, 1, 0x0001                                     // 1. reg3: operand 1
            movi 4, 0x0000                                      // reg4: 0000 (MSB of operand 1)
            // lw 5, 1, 0x0003                                     // 3. reg5: res LSB
            // lw 6, 1, 0x0004                                     // 4. reg6: res MSB

            movi 1, 0x0007                                      // Memory start

            // Save Reg4 and Reg6 in memory                     // Save in memory
            sw 4, 1, 0x0000                                     // 7. MSB operand 1
            sw 6, 1, 0x0001                                     // 8. MSB result
            movi 4, 0x0000
            movi 6, 0x0000

            // Add first 15 bits
            movi 2, 0x7fff                                      // Mask
            nand 4, 3, 2                                        // Isolate 15 bits
            nand 4, 4, 4                                        // Reverse to and
            nand 6, 5, 2                                        // Isolate 15 bits
            nand 6, 6, 6                                        // Reverse to and

            add 7, 4, 6                                         // add Reg3 and Reg5 in Reg7
            sw 7, 1, 0x0002                                     // save result in memory

            // MSB of Reg3 and Reg5
            movi 2, 0x8000                                      // Mask
            nand 4, 3, 2                                        // Isolate 1 bit
            nand 4, 4, 4                                        // Reverse to and
            nand 6, 5, 2                                        // Isolate 1 bit
            nand 6, 6, 6                                        // Reverse to and
            sw 4, 1, 0x0003                                     // Save word in 3
            sw 6, 1, 0x0004                                     // Save word in 4

            // MSB of Reg3+Reg4
            lw 4, 1, 0x0002                                     // Load res add 15 bits
            nand 7, 4, 2                                        // Get the MSB of A+B
            nand 7, 7, 7                                        // Reverse

            // Now we have :
            //    REG1 : Memory start
            //    REG2 : Mask 0x8000
            //    REG3 : LSB of val1
            //    REG4 : add 15B + 15B
            //    REG5 : LSB of val2
            //    REG6 : MSB bit of REG5
            //    REG7 : MSB of REG3+REG5

            // REG4: Get the MSB bit of REG3
            nand 4, 3, 2                                        // Mask
            nand 4, 4, 4                                        // Reverse to and

            // Condition
test_one:   beq 4, 2, one_rone
            movi 4, 0x0000                                      // Else
            movi 1, <? test_two ?>                              // test_two addr
            jalr 1, 1

one_rone:   movi 4, 0x0001                                      // If

test_two:   nop
            beq 6, 2, one_two
            movi 6, 0x0000                                      // Else
            movi 1, <? test_sum ?>                              // test_sum addr
            jalr 1, 1

one_two:    movi 6, 0x0001                                      // If

test_sum:   nop
            beq 7, 2, one_sum
            movi 7, 0x0000                                      // Else
            movi 1, <? sec_part ?>                              // sec_part addr
            jalr 1,1

one_sum:    movi 7, 0x0001                                      // If

sec_part:   add 4, 4, 6
            add 4, 4, 7

            movi 2, 0x0002
            nand 4, 4, 2
            movi 2, 0xfffd
            beq 2, 4, car_addr
            movi 2, 0x0000
            movi 1, <? aft_carr ?>                              // aft_carr addr
            jalr 1, 1

car_addr:   movi 2, 0x0001

aft_carr:   add 3, 3, 5

msb_part:   movi 1, 0x0007
            lw 4, 1, 0x0000                                     // Load MSB of operand 1
            lw 5, 1, 0x0001                                     // Load MSB of operand 2
            add 4, 4, 5
            add 4, 4, 2

// Ending   EX8 ----------------------------------------------------------------

            movi 1, 0x0000
            sw 3, 1, 0x0003                                     // Save result (LSB)
            sw 4, 1, 0x0004                                     // Save result (MSB)

            lw 5, 1, 0x0005                                     // Load counter
            movi 6, 0x0002                                      // Constant
            beq 6, 5, savex2
            movi 6, <? afterSave ?>
            jalr 6, 6

savex2:     movi 1, 0x000e

            // Bigger than 1
            sw 3, 1, 0x0002                                     // Save x2 result (LSB)
            sw 4, 1, 0x0003                                     // Save x2 result (MSB)

afterSave:  movi 6, <? preloop ?>                               // preloop flag addr
            jalr 6, 6
endloop:    halt
