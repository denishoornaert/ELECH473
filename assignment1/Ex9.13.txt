// Objective: reg1 * reg2 = reg4(MSB) reg3(LSB)

// Memory INFO:
//  1. operand 1
//  2. operand 2 minus 1 !
//  3. result LSB
//  4. result MSB
//  5. counter
//  6. MSB operand 1 (used for sum)
//  7. x2 of Operand 2 LSB
//  8. x2 of Operand 2 MSB
//  9. x4 of Operand 2 LSB
// 10. x4 of Operand 2 MSB
// 11. x8 of Operand 2 LSB
// 12. x8 of Operand 2 MSB
// 13.


            // Init entries
            movi 1, 0x0007                                      // operand 1 LSB (add on every loop)
            movi 2, 0x0009                                      // operand 2 LSB (use for comparison with counter)
            // nop
            // nop
            // nop
            // nop

            // Test if operand 1 == 0 ?
            movi 7, 0x0000
            beq 1, 7, zerodetected
            beq 2, 7, zerodetected

            movi 3, <? endcond ?>                               // else : resume
            jalr 3, 3

zerodetected: movi 3, 0x0000                                    // result LSB
            movi 4, 0x0000                                      // result MSB
            halt                                                // if : halt

            // Init
endcond:    movi 5, 0x0000                                      // result LSB
            movi 6, 0x0000                                      // result MSB
            add 7, 7, 2                                         // counter
            movi 3, 0x0000                                      // Memory start

            // Save context                                     // Memory
            sw 1, 3, 0x0001                                     // 1.  operand 1 (add on every loop)

            addi 2, 2, -1                                       // Remove 1 to operator 2
            sw 2, 3, 0x0002                                     // 2.  operand 2 minus 1 (use to check if we could save x2)

            sw 5, 3, 0x0003                                     // 3.  result LSB
            sw 6, 3, 0x0004                                     // 4.  result MSB

            sw 3, 3, 0x0007                                     // 10. Init 0 for save x2 (LSB)
            sw 3, 3, 0x0008                                     // 11. Init 0 for save x2 (MSB)

            sw 3, 3, 0x0009                                     // 12. Init 0 for save x4 (LSB)
            sw 3, 3, 0x000a                                     // 13. Init 0 for save x4 (MSB)

            sw 3, 3, 0x000b                                     // 14. Init 0 for save x8 (LSB)
            sw 3, 3, 0x000c                                     // 15. Init 0 for save x8 (MSB)

            // Prepare input for ex8
            movi 4, 0x0000
            add 3, 3, 1

            movi 1, 0x0000
            movi 2, <? loop ?>
            jalr 2, 2

preloop:    addi 7, 7, -1                                       // Decrement counter

            // Test for "x2" or "x4" or "x8" or "x16"
            movi 6, 0xffff

            // Test for "x16"
            movi 4, 0xfff0
            nand 4, 7, 4
            beq 4, 6, leq15

            // Bigger than 15
            lw 3, 1, 0x000d                                     // LSB of operand 1 x8
            lw 4, 1, 0x000e                                     // MSB of operand 1 x8
            // (R3 or R4) == 0
            nand 5, 3, 3
            nand 6, 4, 4
            nand 5, 5, 6
            beq 5, 1, leq15                                     // If x8 not yet computed

            addi 7, 7, -15                                       // If compute -> just decrement by 4
            // Jump to ex8
            movi 2, <? loop ?>
            jalr 2, 2

            // Test for "x8"
leq15:      movi 4, 0xfff8
            nand 4, 7, 4
            beq 4, 6, leq7

            // Bigger than 7
            lw 3, 1, 0x000b                                     // LSB of operand 1 x8
            lw 4, 1, 0x000c                                     // MSB of operand 1 x8
            // (R3 or R4) == 0
            nand 5, 3, 3
            nand 6, 4, 4
            nand 5, 5, 6
            beq 5, 1, leq7                                      // If x8 not yet computed

            addi 7, 7, -7                                       // If compute -> just decrement by 4
            // Jump to ex8
            movi 2, <? loop ?>
            jalr 2, 2

            // Test for "x4"
leq7:       movi 4, 0xfffc
            nand 4, 7, 4
            beq 4, 6, leq3

            // Bigger than 3
            lw 3, 1, 0x0009                                     // LSB of operand 1 x4
            lw 4, 1, 0x000a                                     // MSB of operand 1 x4
            // (R3 or R4) == 0
            nand 5, 3, 3
            nand 6, 4, 4
            nand 5, 5, 6
            beq 5, 1, leq3                                      // If x4 not yet computed

            addi 7, 7, -3                                       // If compute -> just decrement by 4
            // Jump to ex8
            movi 2, <? loop ?>
            jalr 2, 2

            // Test for "x2"
leq3:       movi 4, 0xfffe
            nand 4, 7, 4
            beq 4, 1, leq1

            // Bigger than 1
            lw 3, 1, 0x0007                                     // LSB of operand 1 x2
            lw 4, 1, 0x0008                                     // MSB of operand 1 x2
            // (R3 or R4) == 0
            nand 5, 3, 3
            nand 6, 4, 4
            nand 5, 5, 6
            beq 5, 1, leq1                                    // If not computed -> Load result x1

            // If computed -> just decrement by 2
            addi 7, 7, -1                                     // Decrement counter

            // Jump to ex8
            movi 2, <? loop ?>
            jalr 2, 2

            // Load operand for ex 8
leq1:       lw 3, 1, 0x0001                                     // LSB for operand 1 x1
            movi 4, 0x0000                                      // MSB for operand 1 x1

loop:       sw 7, 1, 0x0005                                     // Save increment

            beq 1, 7, end                                       // Check end of loop or not
            movi 7, <? addOp ?>
            jalr 7, 7

end:        lw 3, 1, 0x0003                                     // Load result
            lw 4, 1, 0x0004
            halt                                                // Halt program


// Begining EX8 ----------------------------------------------------------------
            // Input of EX8:
            //     reg4 reg3     + reg6 reg5 = reg4 reg3
            // operand 1 (or x2) +  result   =  result

addOp:      lw 5, 1, 0x0003                                     // Load LSB result in reg 5

            sw 4, 1, 0x0006                                     // Save MSB of operand 1

            // Add first 15 bits
            movi 2, 0x7fff                                      // Mask
            nand 4, 3, 2                                        // Isolate 15 bits
            nand 4, 4, 4                                        // Reverse to and
            nand 6, 5, 2                                        // Isolate 15 bits
            nand 6, 6, 6                                        // Reverse to and

            add 7, 4, 6                                         // add Reg3 and Reg5 in Reg7

            // MSB of Reg3 and Reg5
            movi 2, 0x8000                                      // Mask
            nand 4, 3, 2                                        // Isolate 1 bit
            nand 4, 4, 4                                        // Reverse to and
            nand 6, 5, 2                                        // Isolate 1 bit
            nand 6, 6, 6                                        // Reverse to and

            // MSB of Reg3+Reg4
            nand 7, 7, 2                                        // Get the MSB of A+B
            nand 7, 7, 7                                        // Reverse

            // Now we have :
            //    REG1 : Memory start
            //    REG2 : Mask 0x8000
            //    REG3 : LSB of val1
            //    REG4 : add 15B + 15B
            //    REG5 : LSB of val2
            //    REG6 : MSB bit of REG5
            //    REG7 : MSB of REG3+REG5

            // Condition
test_one:   beq 4, 2, one_rone
            movi 4, 0x0000                                      // Else
            movi 1, <? test_two ?>                              // test_two addr
            jalr 1, 1

one_rone:   movi 4, 0x0001                                      // If

test_two:   beq 6, 2, one_two
            movi 6, 0x0000                                      // Else
            movi 1, <? test_sum ?>                              // test_sum addr
            jalr 1, 1

one_two:    movi 6, 0x0001                                      // If

test_sum:   beq 7, 2, one_sum
            movi 7, 0x0000                                      // Else
            movi 1, <? sec_part ?>                              // sec_part addr
            jalr 1,1

one_sum:    movi 7, 0x0001                                      // If

sec_part:   add 4, 4, 6
            add 4, 4, 7

            movi 2, 0x0002
            nand 4, 4, 2
            movi 2, 0xfffd
            beq 2, 4, carr_inc
            movi 2, 0x0000
            movi 1, <? aft_carr ?>                              // aft_carr addr
            jalr 1, 1

carr_inc:   movi 2, 0x0001

aft_carr:   add 3, 3, 5

            movi 1, 0x0000
            lw 4, 1, 0x0006                                     // Load MSB of operand 1
            lw 5, 1, 0x0004                                     // Load MSB of operand 2
            add 4, 4, 5                                         // Sum of the two MSB
            add 4, 4, 2                                         // Add carry

            // Rappel: reg4 reg3 + reg6 reg5 = reg4 reg3
// Ending   EX8 ----------------------------------------------------------------

            sw 3, 1, 0x0003                                     // Save result (LSB)
            sw 4, 1, 0x0004                                     // Save result (MSB)

            lw 7, 1, 0x0005                                     // Load counter
            lw 6, 1, 0x0002                                     // Load operator 2 - 1
            beq 6, 7, savex2

            addi 6, 6, -2                                       // Minus 3
            beq 6, 7, savex4

            addi 6, 6, -4                                       // Minus 7
            beq 6, 7, savex8

            movi 6, <? afterSave ?>
            jalr 6, 6

            // Bigger than 1
savex2:     sw 3, 1, 0x0007                                     // Save x2 result (LSB)
            sw 4, 1, 0x0008                                     // Save x2 result (MSB)
            movi 6, <? afterSave ?>
            jalr 6, 6

            // Bigger than 3
savex4:     sw 3, 1, 0x0009                                     // Save x4 result (LSB)
            sw 4, 1, 0x000a                                     // Save x4 result (MSB)
            movi 6, <? afterSave ?>
            jalr 6, 6

            // Bigger than 7
savex8:     sw 3, 1, 0x000b                                     // Save x8 result (LSB)
            sw 4, 1, 0x000c                                     // Save x8 result (MSB)

afterSave:  movi 6, <? preloop ?>                               // preloop flag addr
            jalr 6, 6

halt                                                            // Normaly neverd used ! see label "end"
