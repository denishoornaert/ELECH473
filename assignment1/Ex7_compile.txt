	nop
	nop
	nop
	nop
	movi 4, 0x7fff   // Mask 0111 1111 1111 1111
	nand 5, 1, 4     // Apply mask on 1
	nand 5, 5, 5     // inverse nand
	nand 6, 2, 4     // Apply mask on 2
	nand 6, 6, 6     // inverse nand
	add 3, 5, 6      // Sum of 15 bits of 1 and 2
	movi 4, 0x8000   // Mask 1000 0000 0000 0000
	nand 5, 1, 4     // MSB of 1
	nand 5, 5, 5
	nand 6, 2, 4     // MSB of 2
	nand 6, 6, 6
	nand 7, 3, 4     // MSB of 1+2 (15 bits !)
	nand 7, 7, 7

	// Condition
	beq 5, 4, one_ro
	movi 5, 0x0000			// else
	movi 3, 0x001c			// testOnRTwo addr
	jalr 3, 3
one_ro: nop
	movi 5, 0x0001
	// if

testOnRTwo: beq 6, 4, one_rt
	movi 6, 0x0000			// else
	movi 3, 0x0025			// testOnRSum addr
	jalr 3, 3
one_rt: nop
	movi 6, 0x0001
	// if

testOnRSum: beq 7, 4, one_rs
	movi 7, 0x0000			// else
	movi 3, 0x002e			// end3 addr
	jalr 3, 3
one_rs: nop
	movi 7, 0x0001
	// if
end3: nop

	add 5, 5, 6     // Add MSB of 1 with (MSB of) 2
	add 5, 5, 7     // Add MSB of SUM with previous sum

	movi 4, 0x0002  // Mask 0000 0000 0000 0010
	nand 5, 5, 4    // Get the second value of the sum of MSB
	movi 4, 0xfffd  // Mask 1111 1111 1111 1101
	beq 5, 4, carry
	movi 4, 0x0000
	movi 3, 0x003e			// afterCarry addr
	jalr 3, 3

carry: movi 4, 0x0001
afterCarry: add 3, 1, 2
	halt
